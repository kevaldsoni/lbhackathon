/*package com.model.dao;

import java.util.HashMap;
import java.util.Map;

import javax.net.ssl.SSLSocketFactory;

import org.jivesoftware.smack.ConnectionConfiguration;
import org.jivesoftware.smack.ConnectionConfiguration.SecurityMode;
import org.jivesoftware.smack.PacketListener;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.filter.PacketTypeFilter;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.packet.Packet;
import org.json.simple.JSONValue;


public class UpstreamMessage {
	private static final String GCM_SERVER = "gcm-xmpp.googleapis.com";
    private static final int GCM_PORT = 5235;
    private XMPPConnection connection;
    private static final String GCM_ELEMENT_NAME = "gcm";
    private static final String GCM_NAMESPACE = "google:mobile:data";
	
	public void connect(long senderId, String apiKey)
            throws XMPPException, Exception {
        ConnectionConfiguration config = new ConnectionConfiguration(GCM_SERVER, GCM_PORT);
        config.setSecurityMode(SecurityMode.required);
        config.setReconnectionAllowed(true);
       // config.setRosterLoadedAtLogin(false);
       // config.setSendPresence(false);
        config.setSocketFactory(SSLSocketFactory.getDefault());

        connection = new XMPPConnection(config);
        connection.connect();
        
        connection.login("1034234491032@gcm.googleapis.com", "AIzaSyAFP_1zVBUoBiUVTDJQLNerheX3VjBIkOw");

        
        // Handle incoming packets
       
        connection.addPacketListener(new PacketListener() {
        	
            @Override
            public void processPacket(Packet packet) {
               // logArea.logMessage( "Received: " + packet.toXML() );
                Message incomingMessage = (Message) packet;
                
            GcmPacketExtension gcmPacket = (GcmPacketExtension) incomingMessage.getExtension(GCM_NAMESPACE);
                String json = gcmPacket.getJson();
                try {
                    @SuppressWarnings("unchecked")
                    Map<String, Object> jsonMap = (Map<String, Object>) JSONValue.parseWithException(json);
                    handleMessage(jsonMap);
                      // present for "ack"/"nack", null otherwise
                    Object messageType = jsonObject.get("message_type");

                    if (messageType == null) {
                        // Normal upstream data message
                        handleUpstreamMessage(jsonObject);

                        // Send ACK to CCS
                        String messageId = (String) jsonObject.get("message_id");
                        String from = (String) jsonObject.get("from");
                        String ack = createJsonAck(from, messageId);
                        send(ack);
                    } else if ("ack".equals(messageType.toString())) {
                          // Process Ack
                          handleAckReceipt(jsonObject);
                    } else if ("nack".equals(messageType.toString())) {
                          // Process Nack
                          handleNackReceipt(jsonObject);
                    } else if ("control".equals(messageType.toString())) {
                          // Process control message
                          handleControlMessage(jsonObject);
                    } else {
                         
                    }
                } catch (Exception e) {
                  e.printStackTrace();
                } 
            }
        }, new PacketTypeFilter(Message.class));

        // Log all outgoing packets
        connection.addPacketInterceptor(new PacketInterceptor() {
            @Override
                public void interceptPacket(Packet packet) {
                    logArea.logMessage( "Sent: " + packet.toXML());
                }
            }, new PacketTypeFilter(Message.class));

        connection.login(senderId + "@gcm.googleapis.com", apiKey);
    }
	
	
	
	private void handleMessage(Map<String, Object> jsonMap) {
		   // only present for "ack"/"nack" messages
		   Object messageType = jsonMap.get("message_type");
		   if (messageType == null) {
		      // Normal upstream data message
			   
		      CcsMessage msg = getMessage(jsonMap);
		      handleIncomingDataMessage(msg);
		      // Send ACK to CCS
		      String ack = createJsonAck(msg.getFrom(), msg.getMessageId());
		      send(ack);
		   } else if ("ack".equals(messageType.toString())) {
		      // Process Ack
		      handleAckReceipt(jsonMap);
		   } else if ("nack".equals(messageType.toString())) {
		      // Process Nack
		      handleNackReceipt(jsonMap);
		   } else {
		      //logger.log(Level.WARNING, "Unrecognized message type (%s)",
			   System.out.println("Unrecognized message type (%s)");
		      messageType.toString();
		   }
		}
	
	
	// keval
	public static Map createAttributeMap(
		      String to,
		      String messageId,
		      Map<String, String> payload,
		      String collapseKey,
		      Long timeToLive,
		      Boolean delayWhileIdle) {
		   Map<String, Object> message =
		         new HashMap<String, Object>();
		   if (to != null) {
		      message.put("to", to);
		   }
		   if (collapseKey != null) {
		      message.put("collapse_key", collapseKey);
		   }
		   if (timeToLive != null) {
		      message.put("time_to_live", timeToLive);
		   }
		   if (delayWhileIdle != null && delayWhileIdle) {
		      message.put("delay_while_idle", true);
		   }
		   if (messageId != null) {
		      message.put("message_id", messageId);
		   }
		   message.put("data", payload);
		   return message;
		}
	
	//keval
	public static String createJsonMessage(
		      String to,
		      String messageId,
		      Map<String, String> payload,
		      String collapseKey,
		      Long timeToLive,
		      Boolean delayWhileIdle) {
		   return createJsonMessage(
		         createAttributeMap(
		               to,
		               messageId,
		               payload,
		               collapseKey,
		               timeToLive,
		               delayWhileIdle));
		}

		public static String createJsonMessage(Map map) {
		   return JSONValue.toJSONString(map);
		}
	
	//keval
	protected void send(String jsonRequest) {
        Packet request = new GcmPacketExtension(jsonRequest).toPacket();
        connection.sendPacket(request);
    }
	
	protected void handleUpstreamMessage(Map<String, Object> jsonObject) {
        // PackageName of the application that sent this message.
        String category = (String) jsonObject.get("category");
        String from = (String) jsonObject.get("from");
        @SuppressWarnings("unchecked")
        Map<String, String> payload = (Map<String, String>) jsonObject.get("data");

        // what type of upstream message is this?
        if ( ! payload.containsKey( "my_action" ) )
        {
            // Hmmm - this shouldn't happen!
            logArea.logMessage( "handleUpstreamMessage - incoming message is missing my_action" );
            // just ignore the  message
            return;
        }

        // what action do they want?
        String my_action = (String) payload.get( "my_action" );
        if ( my_action.equals( "edu.eku.styere.gcmpushclient.REGISTER" ) ) {
            // registration request
            String username = (String) payload.get( "username" );

          //  logArea.logMessage( "Registration request: user=" + username + ", ID/Token=" + from );

            // save the information
            users.addDevice( username, from );

            return;
        } else {
            // take default action of echoing the message       
            payload.put("ECHO", "Application: " + category);

            // Send an ECHO response back
            String echo = createJsonMessage(from, nextMessageId(), payload,
                    "echo:CollapseKey", null, false);

            try {
                sendDownstreamMessage(echo);
            } catch (NotConnectedException e) {
                //logArea.logMessage( "Not connected anymore, echo message is not sent: " + e.getMessage() );
            }
        }
    }
	
	protected void handleAckReceipt(Map<String, Object> jsonObject) {
        String messageId = (String) jsonObject.get("message_id");
        String from = (String) jsonObject.get("from");
        //logArea.logMessage( "handleAckReceipt() from: " + from + ", messageId: " + messageId );
    }
	
	protected void handleNackReceipt(Map<String, Object> jsonObject) {
        String messageId = (String) jsonObject.get("message_id");
        String from = (String) jsonObject.get("from");
        //logArea.logMessage( "handleNackReceipt() from: " + from + ", messageId: " + messageId );
    }
	
}
*/